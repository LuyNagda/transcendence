services:
  auth:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ssl_certs:/certs
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_NAME=${DB_NAME}
      - POSTGRES_DB=${DB_NAME}
      - DB_HOST=db
      - POSTGRES_HOST=db
      - DB_USER=${DB_USER}
      - POSTGRES_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DEBUG=${DEBUG}
      - DOMAIN=${DOMAIN}
      - RTC_STUN_URL=${RTC_STUN_URL}
      - RTC_TURN_URL_1=${RTC_TURN_URL_1}
      - RTC_TURN_URL_2=${RTC_TURN_URL_2}
      - RTC_TURN_USERNAME=${RTC_TURN_USERNAME}
      - RTC_TURN_CREDENTIAL=${RTC_TURN_CREDENTIAL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls.certresolver=myresolver"
      - "traefik.http.routers.auth-ws.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.auth-ws.entrypoints=websecure"
      - "traefik.http.routers.auth-ws.tls.certresolver=myresolver"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"
    develop:
      watch:
        - action: rebuild
          path: ./requirements.txt
          target: /app/
        - action: rebuild
          path: ./Dockerfile
          target: /app/
        - action: rebuild
          path: ./docker-compose.yml
          target: /app/
        - action: rebuild
          path: ./transcendence/.env
          target: /app/transcendence/
        - action: sync+restart
          path: ./
          target: /app/
    networks:
      - app

  auth-test:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ ".venv/bin/python", "manage.py", "test", "-v", "2" ]
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_NAME=${DB_NAME}
      - POSTGRES_DB=${DB_NAME}
      - DB_HOST=db
      - POSTGRES_HOST=db
      - DB_USER=${DB_USER}
      - POSTGRES_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DEBUG=True
    networks:
      - app
    profiles:
      - dev

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-h", "localhost", "-d", "${DB_NAME}" ]
      interval: 1s
      retries: 30
      start_period: 40s

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - app
    profiles:
      - dev

  coturn:
    image: coturn/coturn
    network_mode: host
    volumes:
      - ./turnserver.conf:/etc/coturn/turnserver.conf:ro
    command: [ "-c", "/etc/coturn/turnserver.conf" ]
    profiles:
      - dev

  traefik:
    image: traefik:v2.9
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${DEFAULT_FROM_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - app
    profiles:
      - prod

networks:
  app:


volumes:
  postgres_data:
  letsencrypt:
  ssl_certs:
