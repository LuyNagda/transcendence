services:
  auth:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_NAME=${DB_NAME}
      - POSTGRES_DB=${DB_NAME}
      - DB_HOST=db
      - POSTGRES_HOST=db
      - DB_USER=${DB_USER}
      - POSTGRES_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST=${BUILD_TYPE:-dev} == prod && ${EMAIL_HOST} || mailhog
      - EMAIL_PORT=${BUILD_TYPE:-dev} == prod && ${EMAIL_PORT} || 1025
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    develop:
      watch:
        - action: sync+restart
          path: ./
          target: /app/
    networks:
      - front
      - back

  auth-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_NAME=${DB_NAME}
      - POSTGRES_DB=${DB_NAME}
      - DB_HOST=db
      - POSTGRES_HOST=db
      - DB_USER=${DB_USER}
      - POSTGRES_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    networks:
      - front
      - back
    profiles:
      - ${BUILD_TYPE:-dev}

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - back
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DB_USER}",
          "-h",
          "localhost",
          "-d",
          "${DB_NAME}"
        ]
      interval: 1s
      retries: 30
      start_period: 40s

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - front
    profiles:
      - ${BUILD_TYPE:-dev}

  traefik:
    image: traefik:v2.9
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${DEFAULT_FROM_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - front
    profiles:
      - ${BUILD_TYPE:-prod}

networks:
  front:
  back:


volumes:
  postgres_data:
